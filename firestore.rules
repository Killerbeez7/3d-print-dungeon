rules_version = '2';


service cloud.firestore {
  match /databases/{database}/documents {

    // ------------- Helpers --------------
    function isSignedIn()   { return request.auth != null; }
    function isOwner(userId) { return request.auth.uid == userId; }
    function isAdmin()      { return request.auth.token.admin  == true; }
    function isSuperAdmin() { return request.auth.token.super  == true; }
    function rolesUnchanged() { return !("roles" in request.writeFields); }

    // -------------- Collection-group allowances --------------
    // Allow read access to any subcollection named "public" (e.g., users/{uid}/public/*)
    match /{path=**}/public/{docId} {
      allow read: if true;
    }

    // -------------- Username registry --------------
    // Public read for mapping username -> uid; writes only via backend (Admin SDK)
    match /usernames/{key} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // -------------- Admins List--------------
    match /admins/{uid} {
    allow read : if isAdmin();
    allow write: if isSuperAdmin(); 
    }
    

    // -------------- Users --------------
    match /users/{userId} {
      allow read: if true;
      allow create: if isSignedIn() && isOwner(userId);
      allow update, delete: if isAdmin();

      // Public profile - readable by anyone
      match /public/{docId} {
        allow read: if true;
        allow write: if isSignedIn() && isOwner(userId);
      }

      // Private profile - only owner or admins
      match /private/{docId} {
        allow read, write: if isSignedIn() && (isOwner(userId) || isAdmin());
      }

      // Settings - only owner or admins
      match /settings/{docId} {
        allow read, write: if isSignedIn() && (isOwner(userId) || isAdmin());
      }

      // Artist profile - private by default
      match /artist/{docId} {
        allow read, write: if isSignedIn() && (isOwner(userId) || isAdmin());
      }

      // Purchases (private)
      match /purchases/{purchaseId} {
        allow read, write: if isSignedIn() && (isOwner(userId) || isAdmin());
      }

      // Uploads (private metadata per user)
      match /uploads/{modelId} {
        allow read, write: if isSignedIn() && (isOwner(userId) || isAdmin());
      }
    }

    // -------------- Artists (Public Profiles) --------------
    match /artists/{artistId} {
      // Anyone can read public artist profiles
      allow read: if true;
      
      // Only the artist themselves or admins can write
      allow create, update: if isSignedIn() && request.auth.uid == artistId || isAdmin();
      allow delete: if isAdmin();
    }

    // -------------- Models --------------
    match /models/{modelId} {
      allow read:   if true;
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn()
        && (resource.data.uploaderId == request.auth.uid || isAdmin());
    }
    
    // -------------- Likes --------------
    match /likes/{likeId} {
      allow read: if true;
      allow write: if isSignedIn();
    }

    // -------------- Follows --------------
    // Expose follow relationship documents for read so the client can resolve isFollowing
    // Writes are restricted to backend (Admin SDK via Cloud Functions)
    match /follows/{followId} {
      allow read: if isSignedIn();
      allow write: if false;
    }

    // -------------- Comments --------------
    match /comments/{commentId} {
      allow read: if true;
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn() 
        && (resource.data.userId == request.auth.uid || isAdmin());
    }

    // -------------- Payment Collections --------------
    
    // Purchases - users can read their own purchases, admins can read all
    match /purchases/{purchaseId} {
      allow read: if isSignedIn() && 
        (resource.data.buyerId == request.auth.uid || 
         resource.data.sellerId == request.auth.uid || 
         isAdmin());
      allow create, update: if false; // Only cloud functions can write
      allow delete: if isAdmin();
    }

    // Payment Intents - users can read their own, admins can read all
    match /paymentIntents/{paymentIntentId} {
      allow read: if isSignedIn() && 
        (resource.data.buyerId == request.auth.uid || 
         resource.data.sellerId == request.auth.uid || 
         isAdmin());
      allow create, update: if false; // Only cloud functions can write
      allow delete: if isAdmin();
    }

    // Subscriptions - users can read their own, admins can read all
    match /subscriptions/{subscriptionId} {
      allow read: if isSignedIn() && 
        (resource.data.userId == request.auth.uid || isAdmin());
      allow create, update: if false; // Only cloud functions can write
      allow delete: if isAdmin();
    }

    // -------------- Site Settings --------------
    match /settings/{doc} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // -------------- Reports --------------
    match /reports/{reportId} {
      allow read: if isAdmin();
      allow create: if isSignedIn();
      allow update, delete: if isAdmin();
    }

    // -------------- Analytics --------------
    match /analytics/{analyticsId} {
      allow read, write: if isAdmin();
    }
    match /analytics/{analyticsId}/{subcollection}/{subDocId} {
      allow read, write: if isAdmin();
    }


    // -------------- ViewTrackers --------------
    match /viewTrackers/{viewId} {
      allow read: if true;
      allow create: if true;
      allow update: if isSignedIn();
      allow delete: if isAdmin();
    }

    // -------------- UserViews --------------
    match /userViews/{viewId} {
      allow read: if true;
      allow create, update: if isSignedIn();
      allow delete: if isAdmin();
    }
    

    // -------------- Forum --------------
    match /forumCategories/{categoryId} {
      allow read: if true;  // Public categories
      allow create, update, delete: if isAdmin();
    }

    match /forumThreads/{threadId} {
      allow read: if true;  // Public threads
      allow create: if isSignedIn();
      // Only thread author, moderators or admins can update/delete
      allow update, delete: if isSignedIn() && 
        (resource.data.authorId == request.auth.uid || isAdmin());
    }

    match /forumReplies/{replyId} {
      allow read: if true;  // Public replies
      allow create: if isSignedIn();
      // Only reply author, moderators or admins can update/delete
      allow update, delete: if isSignedIn() && 
        (resource.data.authorId == request.auth.uid || isAdmin());
    }

    match /forumThreadLikes/{likeId} {
      allow read: if true;
      allow create, delete: if isSignedIn();
    }

    match /forumUserProfiles/{userId} {
      allow read: if true;
      allow write: if isSignedIn() && 
        (request.auth.uid == userId || isAdmin());
    }

    // -------------- Model Categories --------------
    match /modelCategories/{docId} {
      allow read: if true;   // for production tighten this
    }

    // -------------- User Notifications --------------
    match /userNotifications/{notificationId} {
      // Users can only read/write their own notifications
      allow read, write: if isSignedIn() && 
        resource.data.userId == request.auth.uid;
      
      // Allow creation of new notifications (for the current user)
      allow create: if isSignedIn() && 
        request.resource.data.userId == request.auth.uid;
      
      // Allow updates only to own notifications
      allow update: if isSignedIn() && 
        resource.data.userId == request.auth.uid;
      
      // Allow deletion only of own notifications
      allow delete: if isSignedIn() && 
        resource.data.userId == request.auth.uid;
    }
  }
}

